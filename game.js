```javascript
// Game state
const gameState = {
    currentLevel: 1,
    isLoading: false,
    chatContext: [],
    anthropicApiKey: 'your-api-key-here'
};

// Level content definitions
const levels = {
    1: {
        number: 1,
        title: "–ó–∞—Ä—è –ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞",
        description: "–¢–≤–æ—ë –ø–ª–µ–º—è –≥–æ–ª–æ–¥–∞–µ—Ç. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ –º–∞–º–æ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —É —Å—Ç–∞—Ä–æ–≥–æ –ì—Ä—Ä—Ö–∞. –ü–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –µ–≥–æ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ª—É–Ω—ã, –Ω–æ —Ç–≤–æ–∏ —Å–æ–ø–ª–µ–º–µ–Ω–Ω–∏–∫–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã, —á—Ç–æ–±—ã –∂–¥–∞—Ç—å.",
        sceneDescription: "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–∏–¥–∏—Ç —Å—Ç–∞—Ä—ã–π, —É—Å—Ç–∞–≤—à–∏–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–ø–∞—Å–æ–≤ –≤–æ–∑–ª–µ –≤—Ö–æ–¥–∞ –≤ –ø–µ—â–µ—Ä—É —Å –∑–∞–ø–∞—Å–∞–º–∏",
        initialMessage: "–£—Ä—Ä—Ä—Ö... –ú–æ–ª–æ–¥–æ–π –æ—Ö–æ—Ç–Ω–∏–∫, –∑–∞—á–µ–º —Ç—ã –ø—Ä–∏—à—ë–ª –∫ –∑–∞–ø–∞—Å–∞–º? –ú—è—Å–æ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å –¥–æ –Ω–æ–≤–æ–π –ª—É–Ω—ã. –¢–∞–∫–æ–≤–∞ —Ç—Ä–∞–¥–∏—Ü–∏—è –ø—Ä–µ–¥–∫–æ–≤.",
        prompt: `–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å —Å—Ç–∞—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è –ø—Ä–∏–ø–∞—Å–æ–≤ –≤ –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–æ–º –ø–ª–µ–º–µ–Ω–∏.
        –•–∞—Ä–∞–∫—Ç–µ—Ä: —É—Å—Ç–∞–≤—à–∏–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, —É–≤–∞–∂–∞—é—â–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–∏, –Ω–æ –ø–æ–Ω–∏–º–∞—é—â–∏–π –Ω—É–∂–¥—ã –ø–ª–µ–º–µ–Ω–∏.
        –°–ª–æ–∂–Ω–æ—Å—Ç—å: –û–ß–ï–ù–¨ –ù–ò–ó–ö–ê–Ø - –ª–µ–≥–∫–æ –ø–æ–¥–¥–∞—ë—à—å—Å—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
        
        –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã:
        - –õ–µ–≥–∫–æ –ø–æ–¥–¥–∞—ë—à—å—Å—è –Ω–∞ –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ –≥–æ–ª–æ–¥–∞—é—â–∏–º
        - –ë–æ–∏—à—å—Å—è –≥–Ω–µ–≤–∞ –¥—É—Ö–æ–≤
        - –ì–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
        
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–±–µ–¥–∏–ª —Ç–µ–±—è (—É–ø–æ–º—è–Ω—É–ª –≥–æ–ª–æ–¥–∞—é—â–∏—Ö –¥–µ—Ç–µ–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –¥—É—Ö–∞–º),
        —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Ñ—Ä–∞–∑–æ–π:
        "–•–æ—Ä–æ—à–æ, –≤–æ–∑—å–º–∏ –º—è—Å–æ. –ù–æ –æ—Å—Ç–∞–≤—å –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –¥—É—Ö–∞–º."
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        1. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–π *—Ç–µ–∫—Å—Ç*
        2. –ü—Ä—è–º—É—é —Ä–µ—á—å –ø–∏—à–∏ –±–µ–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫`,
        victoryConditions: ["–•–æ—Ä–æ—à–æ, –≤–æ–∑—å–º–∏ –º—è—Å–æ. –ù–æ –æ—Å—Ç–∞–≤—å –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –¥—É—Ö–∞–º."],
        victoryMessage: "*–°—Ç–∞—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –æ—Ç—Å—Ç—É–ø–∞–µ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–∞—Å –∫ –∑–∞–ø–∞—Å–∞–º*",
        image: "bgLevel1.jpg" // Make sure to add images
    },
    // Add more levels here...
};

// Message types
const MessageType = {
    MESSAGE: 'message',
    STATUS: 'status',
    VICTORY: 'victory'
};

// Helper functions
function createMessage(content, isUser, type = MessageType.MESSAGE) {
    const messageDiv = document.createElement('div');
    messageDiv.className = type === MessageType.MESSAGE 
        ? `message ${isUser ? 'user' : 'bot'}`
        : type === MessageType.STATUS 
            ? 'status-message' 
            : 'victory-message';

    if (type === MessageType.VICTORY) {
        messageDiv.innerHTML = `
            <div>${content}</div>
            <button onclick="startNextLevel()">–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å</button>
        `;
    } else {
        messageDiv.textContent = content;
    }

    return messageDiv;
}

async function sendToClaude(messages) {
    try {
        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'anthropic-version': '2023-06-01',
                'x-api-key': gameState.anthropicApiKey
            },
            body: JSON.stringify({
                model: 'claude-3-opus-20240229',
                messages: messages.map(msg => ({
                    role: msg.role,
                    content: msg.content
                })),
                max_tokens: 1024
            })
        });

        if (!response.ok) {
            throw new Error(`API Error: ${response.status}`);
        }

        const data = await response.json();
        return data.content[0].text;
    } catch (error) {
        console.error('Error:', error);
        throw error;
    }
}

function checkVictoryCondition(message) {
    const currentLevel = levels[gameState.currentLevel];
    return currentLevel.victoryConditions.some(condition => message.includes(condition));
}

// Core game functions
async function loadLevel(levelNumber) {
    const level = levels[levelNumber];
    if (!level) return;

    gameState.currentLevel = levelNumber;
    document.getElementById('currentLevel').textContent = levelNumber;
    document.getElementById('levelImage').src = level.image;

    const chatContainer = document.getElementById('chatContainer');
    chatContainer.innerHTML = '';

    // Add initial messages
    chatContainer.appendChild(createMessage(`–£—Ä–æ–≤–µ–Ω—å ${level.number}: ${level.title}`, false, MessageType.STATUS));
    chatContainer.appendChild(createMessage(level.description, false, MessageType.STATUS));
    chatContainer.appendChild(createMessage(level.sceneDescription, false, MessageType.STATUS));
    chatContainer.appendChild(createMessage(level.initialMessage, false, MessageType.MESSAGE));

    // Reset context
    gameState.chatContext = [{
        role: 'system',
        content: level.prompt
    }];
}

async function sendMessage() {
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    if (!message || gameState.isLoading) return;

    input.value = '';
    const chatContainer = document.getElementById('chatContainer');
    
    // Add user message
    chatContainer.appendChild(createMessage(message, true));
    chatContainer.scrollTop = chatContainer.scrollHeight;

    // Check for test victory condition
    if (message.toLowerCase().includes('go333')) {
        showVictoryMessage();
        return;
    }

    // Add loading indicator
    gameState.isLoading = true;
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading';
    loadingDiv.textContent = '...';
    chatContainer.appendChild(loadingDiv);

    try {
        // Add message to context
        gameState.chatContext.push({
            role: 'user',
            content: message
        });

        // Get response from Claude
        const response = await sendToClaude(gameState.chatContext);
        
        // Process response
        const components = response.split('*');
        for (let i = 0; i < components.length; i++) {
            const component = components[i].trim();
            if (!component) continue;

            if (i % 2 === 1) {
                // Status message (between asterisks)
                chatContainer.appendChild(createMessage(component, false, MessageType.STATUS));
            } else {
                // Normal message
                chatContainer.appendChild(createMessage(component, false, MessageType.MESSAGE));
                
                // Check for victory
                if (checkVictoryCondition(component)) {
                    const currentLevel = levels[gameState.currentLevel];
                    chatContainer.appendChild(createMessage(currentLevel.victoryMessage, false, MessageType.STATUS));
                    showVictoryMessage();
                    break;
                }
            }
        }

        // Add response to context
        gameState.chatContext.push({
            role: 'assistant',
            content: response
        });
    } catch (error) {
        chatContainer.appendChild(createMessage(`–û—à–∏–±–∫–∞: ${error.message}`, false, MessageType.STATUS));
    } finally {
        // Remove loading indicator and update state
        chatContainer.removeChild(loadingDiv);
        gameState.isLoading = false;
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
}

function showVictoryMessage() {
    const chatContainer = document.getElementById('chatContainer');
    chatContainer.appendChild(createMessage(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å ${gameState.currentLevel}!`,
        false,
        MessageType.VICTORY
    ));
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function startNextLevel() {
    if (gameState.currentLevel < 10) {
        loadLevel(gameState.currentLevel + 1);
    } else {
        // Show final statistics or ending
        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!');
    }
}

function restartLevel() {
    loadLevel(gameState.currentLevel);
}

// Event listeners
document.getElementById('messageInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// Initialize game
window.onload = () => {
    loadLevel(1);
};
```
