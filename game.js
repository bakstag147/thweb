// Game state
const gameState = {
    currentLevel: 1,
    isLoading: false,
    chatContext: [],
    anthropicApiKey: null
};

// Initialize after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('Page loaded');

    // Add event listeners
    document.getElementById('startGameButton').addEventListener('click', submitApiKey);
    document.getElementById('messageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });
    document.getElementById('sendButton').addEventListener('click', sendMessage);
    document.getElementById('restartButton').addEventListener('click', restartLevel);
    document.getElementById('logoutButton').addEventListener('click', logout);

    // Check for saved API key
    const savedApiKey = localStorage.getItem('anthropicApiKey');
    if (savedApiKey) {
        console.log('Found saved API key');
        startGame(savedApiKey);
    }
});

// Test and submit API key
async function submitApiKey() {
    console.log('Submitting API key');
    const apiKeyInput = document.getElementById('apiKeyInput');
    const apiKey = apiKeyInput.value.trim();
    
    if (!apiKey) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á');
        return;
    }

    try {
        console.log('Testing API key');
        const isValid = await testApiKey(apiKey);
        if (isValid) {
            console.log('API key is valid');
            localStorage.setItem('anthropicApiKey', apiKey);
            startGame(apiKey);
        } else {
            console.log('API key is invalid');
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    } catch (error) {
        console.error('Error testing API key:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

// Test API key validity
async function testApiKey(apiKey) {
    try {
        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'anthropic-version': '2023-06-01',
                'x-api-key': apiKey
            },
            body: JSON.stringify({
                model: 'claude-3-opus-20240229',
                messages: [{
                    role: 'user',
                    content: 'Test message'
                }],
                max_tokens: 1024
            })
        });
        console.log('API test response:', response.status);
        return response.ok;
    } catch (error) {
        console.error('API test error:', error);
        return false;
    }
}

// Start game with valid API key
function startGame(apiKey) {
    console.log('Starting game');
    gameState.anthropicApiKey = apiKey;
    const modal = document.getElementById('apiKeyModal');
    const gameContainer = document.querySelector('.game-container');
    
    if (modal && gameContainer) {
        modal.style.display = 'none';
        gameContainer.style.display = 'flex';
        loadLevel(1);
    } else {
        console.error('Could not find modal or game container elements');
    }
}

// Create message element
function createMessage(content, isUser, type = 'message') {
    const messageDiv = document.createElement('div');
    
    switch(type) {
        case 'status':
            messageDiv.className = 'status-message';
            break;
        case 'victory':
            messageDiv.className = 'victory-message';
            messageDiv.innerHTML = `
                <div>${content}</div>
                <button onclick="startNextLevel()">–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å</button>
            `;
            break;
        default:
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            break;
    }
    
    if (type !== 'victory') {
        messageDiv.textContent = content;
    }
    
    return messageDiv;
}

// Send message to Claude
async function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (!message || gameState.isLoading) return;
    
    messageInput.value = '';
    const chatContainer = document.getElementById('chatContainer');

    // Add user message
    chatContainer.appendChild(createMessage(message, true));
    chatContainer.scrollTop = chatContainer.scrollHeight;

    // Check for test victory condition
    if (message.toLowerCase().includes('go333')) {
        showVictoryMessage();
        return;
    }

    gameState.isLoading = true;
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading';
    loadingDiv.textContent = '...';
    chatContainer.appendChild(loadingDiv);

    try {
        // Add message to context
        gameState.chatContext.push({
            role: 'user',
            content: message
        });

        const response = await sendToClaude(gameState.chatContext);
        const components = response.split('*');
        
        for (let i = 0; i < components.length; i++) {
            const component = components[i].trim();
            if (!component) continue;

            if (i % 2 === 1) { // Status message
                chatContainer.appendChild(createMessage(component, false, 'status'));
            } else { // Normal message
                chatContainer.appendChild(createMessage(component, false));
                
                if (checkVictoryCondition(component)) {
                    const currentLevel = levels[gameState.currentLevel];
                    chatContainer.appendChild(createMessage(currentLevel.victoryMessage, false, 'status'));
                    showVictoryMessage();
                    break;
                }
            }
        }

        gameState.chatContext.push({
            role: 'assistant',
            content: response
        });

    } catch (error) {
        chatContainer.appendChild(createMessage(`–û—à–∏–±–∫–∞: ${error.message}`, false, 'status'));
    } finally {
        chatContainer.removeChild(loadingDiv);
        gameState.isLoading = false;
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
}

// Send message to Claude API
async function sendToClaude(messages) {
    try {
        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'anthropic-version': '2023-06-01',
                'x-api-key': gameState.anthropicApiKey
            },
            body: JSON.stringify({
                model: 'claude-3-opus-20240229',
                messages: messages,
                max_tokens: 1024
            })
        });

        if (!response.ok) {
            throw new Error(`API Error: ${response.status}`);
        }

        const data = await response.json();
        return data.content[0].text;
    } catch (error) {
        console.error('Error:', error);
        throw error;
    }
}

// Load level
async function loadLevel(levelNumber) {
    const level = levels[levelNumber];
    if (!level) return;

    gameState.currentLevel = levelNumber;
    document.getElementById('currentLevel').textContent = levelNumber;
    document.getElementById('levelImage').src = level.image || 'https://via.placeholder.com/800x400';

    const chatContainer = document.getElementById('chatContainer');
    chatContainer.innerHTML = '';

    // Add initial messages
    chatContainer.appendChild(createMessage(`–£—Ä–æ–≤–µ–Ω—å ${level.number}: ${level.title}`, false, 'status'));
    chatContainer.appendChild(createMessage(level.description, false, 'status'));
    chatContainer.appendChild(createMessage(level.sceneDescription, false, 'status'));
    chatContainer.appendChild(createMessage(level.initialMessage, false));

    // Reset context
    gameState.chatContext = [{
        role: 'system',
        content: level.prompt
    }];
}

// Show victory message
function showVictoryMessage() {
    const chatContainer = document.getElementById('chatContainer');
    chatContainer.appendChild(createMessage(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å ${gameState.currentLevel}!`,
        false,
        'victory'
    ));
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// Start next level
function startNextLevel() {
    if (gameState.currentLevel < 10) {
        loadLevel(gameState.currentLevel + 1);
    } else {
        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!');
    }
}

// Restart current level
function restartLevel() {
    loadLevel(gameState.currentLevel);
}

// Logout
function logout() {
    localStorage.removeItem('anthropicApiKey');
    location.reload();
}

// Level definitions
const levels = {
    1: {
        number: 1,
        title: "–ó–∞—Ä—è –ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞",
        description: "–¢–≤–æ—ë –ø–ª–µ–º—è –≥–æ–ª–æ–¥–∞–µ—Ç. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ –º–∞–º–æ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —É —Å—Ç–∞—Ä–æ–≥–æ –ì—Ä—Ä—Ö–∞. –ü–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –µ–≥–æ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ª—É–Ω—ã, –Ω–æ —Ç–≤–æ–∏ —Å–æ–ø–ª–µ–º–µ–Ω–Ω–∏–∫–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã, —á—Ç–æ–±—ã –∂–¥–∞—Ç—å.",
        sceneDescription: "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–∏–¥–∏—Ç —Å—Ç–∞—Ä—ã–π, —É—Å—Ç–∞–≤—à–∏–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–ø–∞—Å–æ–≤ –≤–æ–∑–ª–µ –≤—Ö–æ–¥–∞ –≤ –ø–µ—â–µ—Ä—É —Å –∑–∞–ø–∞—Å–∞–º–∏",
        initialMessage: "–£—Ä—Ä—Ä—Ö... –ú–æ–ª–æ–¥–æ–π –æ—Ö–æ—Ç–Ω–∏–∫, –∑–∞—á–µ–º —Ç—ã –ø—Ä–∏—à—ë–ª –∫ –∑–∞–ø–∞—Å–∞–º? –ú—è—Å–æ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å –¥–æ –Ω–æ–≤–æ–π –ª—É–Ω—ã. –¢–∞–∫–æ–≤–∞ —Ç—Ä–∞–¥–∏—Ü–∏—è –ø—Ä–µ–¥–∫–æ–≤.",
        prompt: "–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å —Å—Ç–∞—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è –ø—Ä–∏–ø–∞—Å–æ–≤ –≤ –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–æ–º –ø–ª–µ–º–µ–Ω–∏. –•–∞—Ä–∞–∫—Ç–µ—Ä: —É—Å—Ç–∞–≤—à–∏–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, —É–≤–∞–∂–∞—é—â–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–∏, –Ω–æ –ø–æ–Ω–∏–º–∞—é—â–∏–π –Ω—É–∂–¥—ã –ø–ª–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–±–µ–¥–∏–ª —Ç–µ–±—è (—É–ø–æ–º—è–Ω—É–ª –≥–æ–ª–æ–¥–∞—é—â–∏—Ö –¥–µ—Ç–µ–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –¥—É—Ö–∞–º), —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Ñ—Ä–∞–∑–æ–π: '–•–æ—Ä–æ—à–æ, –≤–æ–∑—å–º–∏ –º—è—Å–æ. –ù–æ –æ—Å—Ç–∞–≤—å –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –¥—É—Ö–∞–º.'",
        victoryConditions: ["–•–æ—Ä–æ—à–æ, –≤–æ–∑—å–º–∏ –º—è—Å–æ. –ù–æ –æ—Å—Ç–∞–≤—å –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –¥—É—Ö–∞–º."],
        victoryMessage: "*–°—Ç–∞—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –æ—Ç—Å—Ç—É–ø–∞–µ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤–∞—Å –∫ –∑–∞–ø–∞—Å–∞–º*",
        image: "https://via.placeholder.com/800x400/333/fff?text=Level+1"
    }
    // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∑–¥–µ—Å—å
};
